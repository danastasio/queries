# cargo-features = ["edition2021"]

[package]
name = "queries4"
version = "0.1.0"
edition = "2018"

[dependencies]
gtk4 = "0.3.0"
sourceview5 = { version = "0.3.0" }
libadwaita = "0.1.0-beta-1"
postgres = { version = "0.19.2", features = [ "with-chrono-0_4", "with-serde_json-1" ] }
# postgres-openssl = "0.5.0"
postgres-native-tls = "0.5.0"
native-tls = "0.2"
sqlparser = "0.14.0"
regex = { version = "1.4.2" }
rusqlite = { version="0.24.2", features=["load_extension", "csvtab", "vtab", "functions", "serde_json", "backup", "column_decltype" ] }
rust_decimal = { version = "1.10.1", features = ["db-postgres"] }
serde = { version="1.0.130", features=["derive"] }
serde_json = "1.0.68"
itertools = "0.10"
csv = "1.1.3"
num-traits="0.2.14"
quick-xml = "0.22.0"
either = "1.6.1"
plots = { path = "../plots" }
notify = "4.0.17"
chrono = "0.4.19"
once_cell = "1.9.0"
anyhow = "1.0"
ordinal = "0.2"
monday = { path = "../monday", features=["plots"] }
const-random = "0.1.13"
chacha20poly1305 = { version = "0.9.0", features = ["stream"] }
base64 = "0.13.0"

# rsa = { version = "0.5.0", features = ["alloc"] }
# include-crypt = "0.1.1"
# rand = "0.8.5"

# Allows a remote SSH connection. Queries are dispatched to psql -t csv via ssh::Session::request_exec,
# and then the tables are parsed from the csv output.
# ssh = "0.1.4"

# gdk-pixbuf="0.14.0"
# dirs = "4.0"
